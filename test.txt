require('dotenv').config();

// server.js

const express = require('express');
const app = express();
const stripe = require('stripe')('sk_test_51Q6a6o083GKZ9SEhFKcyWZ1PDepRF0r0qj42hdZyTMpyUwFscqUODeKWCvAAnkHidtgs86Pqw5B9TPRLGuBd5LJa00jWojXtsu');
const bodyParser = require('body-parser');
const path = require('path');
// Remova o fs, pois não usaremos mais o arquivo JSON
// const fs = require('fs');

// Importar o Mongoose
const mongoose = require('mongoose');

// Substitua <username>, <password> e <dbname> pelos seus valores
const mongoURI = process.env.MONGODB_URI;

// Conectar ao MongoDB Atlas
mongoose.connect(mongoURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => {
  console.log('Conectado ao MongoDB Atlas.');
})
.catch((error) => {
  console.error('Erro ao conectar ao MongoDB Atlas:', error);
});


app.use(bodyParser.json());
app.use(express.static('public'));

console.log('Iniciando servidor...');

app.use(bodyParser.json());
app.use(express.static('public'));

console.log('Middlewares configurados.');

// Rota para servir o arquivo index.html na raiz
app.get('/', (req, res) => {
  console.log('Requisição recebida na rota /.');
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Rota para o success.html
app.get('/success.html', (req, res) => {
  console.log('Requisição recebida na rota /success.html.');
  res.sendFile(path.join(__dirname, 'public', 'success.html'));
});

// Rota para o cancel.html
app.get('/cancel.html', (req, res) => {
  console.log('Requisição recebida na rota /cancel.html.');
  res.sendFile(path.join(__dirname, 'public', 'cancel.html'));
});

// Endpoint para criar uma sessão de checkout
app.post('/create-checkout-session', async (req, res) => {
  console.log('Requisição POST recebida em /create-checkout-session.');
  try {
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: [{
        price_data: {
          currency: 'usd',
          product_data: {
            name: 'Adopt a Stone',
          },
          unit_amount: 100,
        },
        quantity: 1,
      }],
      mode: 'payment',
      success_url: 'http://localhost:3000/success.html',
      cancel_url: 'http://localhost:3000/cancel.html',
    });

    res.json({ id: session.id });
  } catch (error) {
    console.error('Erro ao criar sessão de checkout:', error);
    res.status(500).json({ error: error.message });
  }
});

// Rota para salvar uma nova pedra
app.post('/save-stone', async (req, res) => {
  console.log('Requisição POST recebida em /save-stone.');
  let newStone = req.body;

  try {
    // Verificar se o userCode já existe na requisição
    let userCode = newStone.userCode;
    if (!userCode) {
      // Gerar um código alfanumérico único para o usuário
      userCode = Math.random().toString(36).substring(2, 10);
      newStone.userCode = userCode;
    }

    const stone = new Stone(newStone);
    await stone.save();
    console.log('Pedra salva no banco de dados.');

    // Enviar o userCode de volta ao cliente
    res.json({ message: 'Pedra salva com sucesso', userCode: userCode });
  } catch (error) {
    console.error('Erro ao salvar a pedra:', error);
    res.status(500).json({ error: 'Erro ao salvar a pedra' });
  }
});


// Rota para obter todas as pedras
app.get('/get-stones', async (req, res) => {
  console.log('Requisição GET recebida em /get-stones.');
  try {
    const stones = await Stone.find({});
    res.json(stones);
  } catch (error) {
    console.error('Erro ao obter as pedras:', error);
    res.status(500).json({ error: 'Erro ao obter as pedras' });
  }
});



// Inicia o servidor
app.listen(3000, () => console.log('Servidor rodando na porta 3000.'));

//Mongoose

// Definir o esquema e o modelo da pedra
const stoneSchema = new mongoose.Schema({
  nome: String,
  imagem: String,
  localizacao: String,
  descricao: String,
  x: Number,
  y: Number,
  userCode: String, // Adiciona o campo userCode
});


const Stone = mongoose.model('Stone', stoneSchema);
